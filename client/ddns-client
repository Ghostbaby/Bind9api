#!/usr/bin/env bash

#just keep the hostname strip the rest.
declare hostname="${DDNS_ROUTE53_HOST%%.*}"
# default interval 12 hours
declare interval="${DDNS_ROUTE53_INTERVAL:-434200}"
declare domain="${DDNS_ROUTE53_DOMAIN}"
declare -r DATE_FORMAT="%Y-%m-%d %H:%M:%S"
declare -r VERSION="2.0.2"
declare ttl=${DDNS_ROUTE53_TTL:-300}
declare record_type="${DDNS_ROUTE53_TYPE:-A}"
declare comment="${DDNS_ROUTE53_COMMENT:-Updated at $(date +"$DATE_FORMAT")}"
declare record_set="$DDNS_ROUTE53_RECORD_SET"
declare handler_script="$DDNS_ROUTE53_SCRIPT"
declare ip="$DDNS_ROUTE53_IP"
declare old_ip
declare cur_ip

function errlog() {
  echo "$(date) - $@" >&2
}

function log() {
  echo "$(date) - $@"
}

function usage() {
  cat <<HELP
Usage: $(basename "$0") [OPTIONS]

Dynamic DNS updater using Amazon Route53.

Options:
  -h, --hostname <HOSTNAME>       Hostname to be used in combination with
                                  the -d flag to create the record-set
  -n, --interval <seconds>        The time in seconds between runs.
  -d, --domain <DOMAIN>           Domain used to form the record set domain
  -r, --record-set <RECORD_SET>   Amazon Route53 record set name (required)
  -t, --ttl <SECONDS>             TTL for DNS record
  -y, --type <TYPE>               DNS record type
  -i, --ip <IP_ADDRESS>           Force usage of IP address
  -s, --script <SCRIPT_PATH>      Path to script to execute on change
  -h, --help                      You're looking at it
  -v, --version                   Print version and exit
HELP
}

function valid-ip() {
  local ip=$1 octets
  if [[ "$ip" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
    IFS='.' read -r -a octets <<< "$ip"
    for octet in $octets; do
      (( octet <= 255 )) || return 1
    done
  fi
  return 0
}

function fetch-current-ip() {
  #aws route53 list-resource-record-sets \
  #  --hosted-zone-id "$zone_id" \
  #  --output text \
  #  --query "ResourceRecordSets[?Name == '$record_set.' && Type == '$record_type'].ResourceRecords[0].Value | [0] || ''"
  echo curl http://192.168.105.102:32290/dns/zone/$domain | jq .[].$hostname[0].Answer | sed 's/\"//g'
  curl http://192.168.105.102:32290/dns/zone/$domain | jq .[].$hostname[0].Answer | sed 's/\"//g'
}

function init-args() {
  while (( $# > 0 )); do
    case "$1" in
      -n|--interval) interval="$2"; shift ;;
      -d|--domain) domain="$2"; shift ;;
      -h|--host) hostname="$2"; shift ;;
      -r|--record-set) record_set="$2"; shift ;;
      -i|--ip) ip="$2"; shift ;;
      -t|--ttl) ttl="$2"; shift ;;
      -y|--type) record_type="$2"; shift ;;
      -s|--script) handler_script="$2"; shift ;;
      -h|--help) usage; exit 0 ;;
      -v|--version) echo "$VERSION"; exit 0 ;;
      *) errlog "Unknown option: $1"; usage; exit 1 ;;
    esac
    shift
  done
  if [[ -n ${hostname} && -n ${domain} ]]; then
    record_set="${hostname}.${domain}"
    echo "record_set is $record_set"
  fi

  if [[ -z "$ip" ]]; then
    ip="$(dig +short myip.opendns.com @resolver1.opendns.com)"
  fi
  old_ip="$(fetch-current-ip 2> /dev/null)"
  return 0
}

function validate-args() {
  if [[ -z $hostname && -z $domain && -z $record_set ]]; then
    errlog "Missing -r or --record-set or \$DDNS_ROUTE53_RECORD_SET"
    return 1
  elif [[ -n "$handler_script" && ! -x "$handler_script" ]]; then
    errlog "Script at '$handler_script' is not executable"
    return 1
  elif [[ -z "$ip" ]]; then
    errlog "Unable to determine current IP address"
    return 1
  fi
  return 0
}


function update-dns-entry() {
  local ip=$1 output success
  #output="$(aws route53 change-resource-record-sets --hosted-zone-id "$zone_id" --change-batch "$batch" 2>&1)"
  output="$(curl -s -i -H "Content-Type: application/json" -X POST http://bind9api-svc:5000/dns/record/$record_set/$ttl/$record_type/$ip |grep DNS|awk '{print $2}' 2>&1)"
  if [[ $output = "successful" ]]; then
    success=0
  else
    success=1
  fi
  if (( $success == 0 )); then
    log "$output"
  else
    errlog "Failed to update DNS entry:"
    errlog "$output"
  fi
  return $success
}

function run-handler-script() {
  local old_ip=$1 new_ip=$2
  [[ -z "$handler_script" ]] || "$handler_script" "$old_ip" "$new_ip"
}

function main() {
  init-args "$@"
  validate-args || exit 1
  if ! valid-ip "$ip"; then
    log "Invalid IP address: '$ip'"
    exit 1
  fi
  if [[ "$old_ip" != "$ip" ]]; then
    log "IP changed from '$old_ip' to '$ip', updating entry"
    while true;do
      update-dns-entry "$ip"
      status=$?
      if [[ $status == 0 ]]; then
        break
      else
        echo "Failed to update DNS entry,try again."
        sleep 5s
      fi
    done
    run-handler-script "$old_ip" "$ip"
    while true;do
      cur_ip="$(dig +short $record_set @192.168.105.200)"
      if [[ "$cur_ip" == "$ip" ]]; then
        log "Record $record_set IP is $cur_ip , it is valid now"
        exit
      fi
        sleep 15
      done
  else
    log "Current HOSTNAME == $record_set Current IP == $ip No change needed"
  fi
}

main "$@"
